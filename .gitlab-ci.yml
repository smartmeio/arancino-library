# Project:          Arancino Library - Serial Manager
# Author:           Sergio Tomasello <sergio@smartme.io>
# Created:          2018.10.11
# Notes:            La pipeline esegue la creazione dell'archivio della libreria compatibile per Aduino IDE
# Internal Vars:    Lista delle variabili definete internamente ed usate nella pipeline:
#                   DATE:           data di esecuzione della pipeline
#                   PKG_NAME:       nome del pacchetto
#                   REPO_NAME:      nome del repository di produzione, composto da due parti:
#                                   il nome del progetto -> $CI_PROJECT_NAME
#                                   ambiente di lavoro: -> "staging" o "release"
#                                   $CI_PROJECT_NAME-staging
#                                   $CI_PROJECT_NAME-release
#                   REPO_DIR:       nome della directory di upload del repository, composto da due parti:
#                                   il nome del progetto -> $CI_PROJECT_NAME
#                                   ambiente di lavoro: -> "staging" o "release"
#                                   $CI_PROJECT_NAME/staging
#                                   $CI_PROJECT_NAME/release
#
# External Vars:    Lista delle variabili definite estarnamente ed usate nella pipeline:
#                   REPO_USR:       nome utente del associato a dev ops per effettuare upload dell'artefatto
#                   REPO_PWD:       password associata all'utente dev ops
#                   REPO_BASE_URL:  url di base del repository: https://download.smartme.io
#

image: smartmeio/arancino-library-build


stages:
  - start
  - test
  - package
  - upload
  - cleanup

#################################
#######       START       #######
#################################

####### START
start:
  stage: start
  only: ['tags']
  except: ['master', 'branches']

  variables:
    GIT_STRATEGY: none

  script:
    - mkdir -p tmp
    - echo `date +%Y-%m-%d` > tmp/date.tmp
    - echo `date +%H-%M-%S` > tmp/time.tmp
    - sed -i "s/version=.*/version=${CI_COMMIT_TAG}/g" library.properties

  artifacts:
    paths:
      - tmp/
    expire_in: 1d

######## PUSH
push:
  stage: start
  only: ['tags']
  except: ['master', 'branches']

  allow_failure: true

  variables:
    GIT_STRATEGY: clone

  before_script:
    - eval `python3 check-version-tag.py ${CI_COMMIT_TAG}`

  script:
    #- apk add git
    - git remote add github https://$GITHUB_BOT_USERNAME:$GITHUB_ACCESS_TOKEN@github.com/$GITHUB_DEST_REPO
    #- git remote show github
    #- git remote show origin
    #- git branch -a
    - git checkout $CI_COMMIT_REF_NAME
    - git fetch github
    #- git push github $CI_COMMIT_REF_NAME --force
    - >
      if [[ ${PRE_RELEASE} == "test"  ]]; then
        echo "not performing TAG push";
      else
        git push github ${CI_COMMIT_TAG}
      fi
    - git push github --all --force

#################################
#######       TEST        #######
#################################

#######    CLI Sketch Test Job    #######
cli-test:
  stage: test
  only: ['tags']
  except: ['master', 'branches']

  # copying the Library source to the Arduino libraries folder
  before_script:
    - cp -r ${CI_PROJECT_DIR} ${HOME}/Arduino/libraries/Arancino
    - chmod +x ./test/arduino-cli-test.sh

  # we feed the test scripts the simple board to complete the FQBN entry
  script:
    - ./test/arduino-cli-test.sh arancino
    - ./test/arduino-cli-test.sh arancino_mignon

#######    Package Release    #######
#esegue la compressione del pacchetto quando viene creato un tag (ovvero ad ogni release)
package_release:

  stage: package
  only: ['tags']
  except: ['master', 'branches']

  script:
    #- apk add zip
    #- DATE="$(cat tmp/date.tmp)"
    - PKG_NAME=$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
    - echo $PKG_NAME > tmp/pgk_name.tmp
    - echo $CI_PROJECT_NAME > tmp/repo_name.tmp
    - echo $CI_COMMIT_REF_NAME > tmp/target_path.tmp
    - mv tmp/ ../tmp && cd ../
    #- tar --exclude='*.git*' --exclude='*.DS_Store*' -zcvf $PKG_NAME.zip $CI_PROJECT_NAME/
    - zip -r $PKG_NAME.zip $CI_PROJECT_NAME -x "$CI_PROJECT_NAME/check-version-tag.py" -x "$CI_PROJECT_NAME/*.git*" "$CI_PROJECT_NAME/*.DS_Store*"
    - mv tmp/ $CI_PROJECT_NAME/
    - mv $PKG_NAME.zip $CI_PROJECT_NAME/tmp/
    # packaging for PlatformIO
    # - jq --arg tag_ver ${CI_COMMIT_REF_NAME} '.version = $tag_ver' library.json|sponge library.json
    # - pio package pack -o /tmp

  dependencies:
    - start

  artifacts:
    paths:
      - tmp/

#################################
#######       UPLOAD      #######
#################################

#######    Upload Staging and Release   #######
#carica sul repository manager
upload:

  stage: upload
  only: ['tags']
  except: ['master', 'branches']

  variables:
    GIT_STRATEGY: none

  before_script:
    - eval `python3 check-version-tag.py ${CI_COMMIT_TAG}`

  script:
    - DATE="$(cat tmp/date.tmp)"
    - TIME="$(cat tmp/time.tmp)"
    - PKG_NAME="$(cat tmp/pgk_name.tmp)"
    - REPO_NAME="$(cat tmp/repo_name.tmp)"
    - TARGET_PATH="$(cat tmp/target_path.tmp)"
    #- apk add curl
    - >
      if [[ ${PRE_RELEASE} == "test" ]]; then
        REPO_NAME=${REPO_NAME}-snapshot
      fi
    # Upload to Artifactory
    - curl -u $REPO_USR:$REPO_PWD -T tmp/$PKG_NAME.zip "${REPO_BASE_URL}/artifactory/${REPO_NAME}/${TARGET_PATH}/${PKG_NAME}.zip"
    # publishing to PlatformIO
    # - pio package publish --owner smartme-io /tmp/Arancino-${CI_COMMIT_REF_NAME}.tar.gz

#################################
#######      CLEANUP      #######
#################################

#######    Cleanup Job    #######
cleanup:
  stage: cleanup
  only: ['tags']
  except: ['master', 'branches']

  variables:
    GIT_STRATEGY: none

  script:
    - echo "Cleaning up"
    - rm -rf tmp/
